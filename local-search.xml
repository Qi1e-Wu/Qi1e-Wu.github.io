<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>leetcode2352-equal-row-and-column-pairs</title>
    <link href="/2024/11/24/leetcode2352-equal-row-and-column-pairs/"/>
    <url>/2024/11/24/leetcode2352-equal-row-and-column-pairs/</url>
    
    <content type="html"><![CDATA[<h1 id="题目重述"><a href="#题目重述" class="headerlink" title="题目重述"></a>题目重述</h1><p>给你一个下标从 <code>0 </code>开始、大小为 <code>n x n</code>的整数矩阵 <code>grid</code> ，返回满足 <code>Ri</code> 行和 <code>Cj</code>列相等的行列对 <code>(Ri, Cj)</code> 的数目。<br>如果行和列以相同的顺序包含相同的元素（即相等的数组），则认为二者是相等的。</p><p><img src="/img/leetcode2352-equal-row-and-column-pairs-ex1.jpg" alt="示例"></p><blockquote><p><strong>输入</strong>：grid &#x3D; [[3,2,1],[1,7,6],[2,7,7]]<br><strong>输出</strong>：1<br><strong>解释</strong>：存在一对相等行列对：</p><ul><li>(第 2 行，第 1 列)：[2,7,7]</li></ul></blockquote><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>一开始想到的朴素方法是选定一行之后依次比较每一行和每一列，这样的话时间复杂度会上升到$$ (O^3) $$，后续想到可以使用哈希表来做。<br>首先遍历行，将行转化为字符串之后存入哈希表，每遇到相同的字符串对应的值就+1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span>[] row : grid)&#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> num : row)&#123;<br>        sb.append(num + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>    hm.put(sb.toString(), hm.getOrDefault(sb.toString(), <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这样就记录了所有的行和出现的对应次数。<br>随后遍历列，如果列在哈希表中出现，则相同数组的数量则增加对应的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>        sb.append(grid[j][i] + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>    ans += hm.getOrDefault(sb.toString(), <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="一个触类旁通的思路"><a href="#一个触类旁通的思路" class="headerlink" title="一个触类旁通的思路"></a>一个触类旁通的思路</h1><p>通过StringBuilder()方法构建需要较高的系统开销。通过模拟哈希的过程则能避免这一点。</p><ul><li>首先选取一个较大的素数作为MODULOUS </li><li>随后选取一个较小的素数作为BASE</li><li>通过计算一行（或者一列）所有元素与BASE的乘积再对MODULOUS取余，则会生成独一无二的哈希值（不考虑碰撞）</li><li>将哈希值存入键值对</li><li>如果列数组计算出相同的哈希值，则认为两行相同<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">BASE</span> <span class="hljs-operator">=</span> <span class="hljs-number">31</span>;  <span class="hljs-comment">// 基数，选择一个较大的质数</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MODULUS</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000000007</span>;  <span class="hljs-comment">// 模数，选择一个较大的质数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hashKey</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>            hashKey = (hashKey * BASE + grid[i][j] * (j + <span class="hljs-number">1</span>)) % MODULUS;<br>        &#125;<br>        map.put(hashKey, map.getOrDefault(hashKey, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hashKey</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            hashKey = (hashKey * BASE + grid[i][j] * (i + <span class="hljs-number">1</span>)) % MODULUS;<br>        &#125;<br>        ans += map.getOrDefault(hashKey, <span class="hljs-number">0</span>);<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Medium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mit-6.s081-lab1</title>
    <link href="/2024/11/23/mit-6-s081-lab1/"/>
    <url>/2024/11/23/mit-6-s081-lab1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/11/23/hello-world/"/>
    <url>/2024/11/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
